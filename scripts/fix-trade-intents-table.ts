// scripts/fix-trade-intents-table.ts
// Creates trade_intents table manually and records migration 0010 if needed.
import { Client } from 'pg';
import * as dotenv from 'dotenv';
import dns from 'dns';
(dns as any).setDefaultResultOrder?.('ipv4first');
dotenv.config();

async function main() {
  const url = process.env.SUPABASE_DB_URL;
  if (!url) { console.error('SUPABASE_DB_URL not set'); process.exit(1); }
  const client = new Client({ connectionString: url });
  await client.connect();
  try {
    const exists = await client.query("SELECT to_regclass('public.trade_intents') as reg");
    if (!exists.rows[0].reg) {
      console.log('Creating trade_intents table...');
      await client.query(`CREATE TABLE trade_intents (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        signal_id BIGINT UNIQUE REFERENCES signals(id) ON DELETE CASCADE,
        action TEXT NOT NULL,
        market TEXT NOT NULL,
        size_mode TEXT NOT NULL,
        size_value NUMERIC NOT NULL,
        max_slippage_bps INTEGER,
        deadline_ts BIGINT,
        intent_hash TEXT,
        created_at TIMESTAMPTZ DEFAULT now()
      )`);
      await client.query(`CREATE INDEX idx_trade_intents_signal_id ON trade_intents(signal_id)`);
    } else {
      console.log('trade_intents table already exists');
    }
    await client.query(`INSERT INTO _migrations (filename) VALUES ($1) ON CONFLICT DO NOTHING`, ['0010_trade_intents.sql']);
    console.log('Migration recorded.');
  } catch (e: any) {
    console.error('Error ensuring trade_intents table:', e.message, e.code);
    process.exit(1);
  } finally {
    await client.end();
  }
}

main();